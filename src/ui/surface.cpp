#include "surface.h"
#include "display.h"

#include <cstring>

namespace UI
{

namespace
{

constexpr unsigned char charset[] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 8, 36, 36, 8, 38, 24, 8, 16, 4, 0, 0, 0, 0, 0, 32, 60, 16, 60, 60, 64, 126, 56, 126, 60, 60, 0, 0, 0, 0, 0, 60, 62, 60, 62, 60, 30, 126, 126, 60, 66, 28, 112, 66, 2, 65, 66, 60, 62, 60, 62, 60, 127, 66, 66, 65, 66, 65, 126, 28, 2, 28, 20, 0, 0, 0, 2, 0, 64, 0, 112, 0, 2, 8, 32, 2, 12, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 48, 8, 12, 73, 8, 36, 36, 62, 41, 36, 8, 8, 8, 0, 0, 0, 0, 0, 32, 66, 24, 66, 66, 96, 2, 4, 64, 66, 66, 0, 0, 32, 0, 2, 66, 65, 66, 66, 66, 34, 2, 2, 66, 66, 8, 32, 34, 2, 99, 66, 66, 66, 66, 66, 66, 8, 66, 66, 65, 66, 65, 64, 4, 2, 16, 34, 0, 0, 0, 2, 0, 64, 0, 8, 0, 2, 8, 32, 2, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 8, 16, 49, 8, 0, 36, 73, 22, 36, 0, 4, 16, 0, 0, 0, 0, 0, 16, 66, 20, 66, 66, 80, 2, 2, 64, 66, 66, 0, 0, 16, 0, 4, 66, 121, 66, 66, 66, 66, 2, 2, 66, 66, 8, 32, 18, 2, 85, 66, 66, 66, 66, 66, 2, 8, 66, 66, 65, 36, 34, 64, 4, 4, 16, 0, 0, 0, 0, 2, 0, 64, 0, 8, 0, 2, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 8, 16, 0, 8, 0, 126, 9, 16, 24, 0, 4, 16, 36, 8, 0, 0, 0, 16, 98, 16, 64, 64, 72, 2, 2, 32, 66, 66, 8, 8, 8, 126, 8, 66, 69, 66, 66, 2, 66, 2, 2, 2, 66, 8, 32, 10, 2, 73, 70, 66, 66, 66, 66, 2, 8, 66, 66, 65, 36, 34, 32, 4, 4, 16, 0, 0, 0, 60, 62, 60, 124, 60, 62, 124, 62, 12, 48, 66, 8, 63, 62, 60, 62, 124, 122, 124, 62, 66, 66, 65, 66, 66, 126, 8, 8, 16, 0, 8, 0, 36, 9, 8, 12, 0, 4, 16, 24, 8, 0, 0, 0, 8, 82, 16, 32, 56, 68, 62, 62, 32, 60, 66, 8, 8, 4, 0, 16, 32, 69, 66, 62, 2, 66, 30, 30, 2, 126, 8, 32, 6, 2, 73, 74, 66, 66, 66, 66, 60, 8, 66, 66, 65, 24, 20, 16, 4, 8, 16, 0, 0, 0, 64, 66, 66, 66, 66, 8, 66, 66, 8, 32, 34, 8, 73, 66, 66, 66, 66, 6, 2, 8, 66, 66, 65, 66, 66, 32, 4, 8, 32, 0, 8, 0, 36, 62, 8, 82, 0, 4, 16, 126, 62, 0, 126, 0, 8, 74, 16, 16, 64, 66, 64, 66, 16, 66, 124, 0, 0, 2, 0, 32, 16, 69, 126, 66, 2, 66, 2, 2, 114, 66, 8, 32, 6, 2, 65, 82, 66, 62, 66, 62, 64, 8, 66, 36, 73, 24, 8, 8, 4, 8, 16, 0, 0, 0, 124, 66, 2, 66, 66, 8, 66, 66, 8, 32, 18, 8, 73, 66, 66, 66, 66, 2, 2, 8, 66, 66, 73, 36, 66, 16, 8, 8, 16, 0, 8, 0, 126, 72, 4, 34, 0, 4, 16, 24, 8, 0, 0, 0, 4, 70, 16, 8, 64, 126, 64, 66, 16, 66, 64, 0, 0, 4, 126, 16, 16, 101, 66, 66, 2, 66, 2, 2, 66, 66, 8, 32, 10, 2, 65, 98, 66, 2, 66, 10, 64, 8, 66, 36, 73, 36, 8, 4, 4, 16, 16, 0, 0, 0, 66, 66, 2, 66, 126, 8, 66, 66, 8, 32, 14, 8, 73, 66, 66, 66, 66, 2, 60, 8, 66, 36, 73, 24, 66, 8, 8, 8, 16, 0, 0, 0, 36, 72, 52, 34, 0, 4, 16, 36, 8, 0, 0, 0, 4, 66, 16, 4, 66, 64, 64, 66, 8, 66, 64, 0, 0, 8, 0, 8, 0, 89, 66, 66, 66, 66, 2, 2, 66, 66, 8, 34, 18, 2, 65, 66, 66, 2, 66, 18, 66, 8, 66, 36, 85, 36, 8, 2, 4, 16, 16, 0, 0, 0, 66, 66, 2, 66, 2, 8, 66, 66, 8, 32, 18, 8, 73, 66, 66, 66, 66, 2, 64, 8, 66, 36, 73, 36, 66, 4, 8, 8, 16, 0, 8, 0, 36, 73, 74, 34, 0, 8, 8, 0, 0, 8, 0, 8, 2, 66, 16, 2, 66, 64, 66, 66, 8, 66, 32, 8, 8, 16, 0, 4, 16, 1, 66, 66, 66, 34, 2, 2, 66, 66, 8, 34, 34, 2, 65, 66, 66, 2, 82, 34, 66, 8, 66, 24, 99, 66, 8, 2, 4, 32, 16, 0, 0, 0, 66, 66, 66, 66, 2, 8, 66, 66, 8, 32, 34, 8, 73, 66, 66, 66, 66, 2, 64, 8, 66, 24, 73, 66, 66, 2, 8, 8, 16, 0, 8, 0, 36, 62, 50, 92, 0, 16, 4, 0, 0, 8, 0, 8, 2, 60, 124, 126, 60, 64, 60, 60, 8, 60, 28, 8, 8, 32, 0, 2, 16, 126, 66, 62, 60, 30, 126, 2, 60, 66, 28, 28, 66, 126, 65, 66, 60, 2, 60, 66, 60, 8, 60, 24, 65, 66, 8, 126, 28, 32, 28, 0, 0, 0, 124, 62, 60, 124, 60, 8, 124, 66, 28, 34, 66, 28, 73, 66, 60, 62, 124, 2, 62, 112, 124, 24, 62, 66, 124, 126, 48, 8, 12, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 34, 0, 0, 0, 0, 0, 2, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 28, 0, 0, 0, 0, 0, 2, 64, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0
};

}

Surface::Surface(Display& display)
    : mDisplay(display)
{ }

void Surface::paintText(int         x,
                        int         y,
                        const char* str,
                        uint8_t     fg,
                        uint8_t     bg)
{
    constexpr int kCharHeight(14);
    
    auto len(std::strlen(str));
    
    mDisplay.initRegion(x, y, len << 3, kCharHeight);

    const ColorMap colorMap(fg, bg);
    
    for (int line(0); line < kCharHeight; ++line)
    {
        paintTextLine(str, str + len, line, colorMap);
    }
}

void Surface::initRegion(int x, int y, int w, int h)
{
    mDisplay.initRegion(x, y, w, h);
}

void Surface::paintTextLine(const char*     begin,
                            const char*     end,
                            const int       line,
                            const ColorMap& colorMap)
{
    for (auto it(begin); it != end; ++it)
    {
        const auto chr(*it);
        
        if (chr > 32 && chr < 127)
        {
            const auto data(charset[chr - 33 + (line * 94)]);
            
            mDisplay.writeData(colorMap.data[data & 0x3]);
            mDisplay.writeData(colorMap.data[(data >> 2) & 0x3]);
            mDisplay.writeData(colorMap.data[(data >> 4) & 0x3]);
            mDisplay.writeData(colorMap.data[(data >> 6) & 0x3]);

        }
        else if (chr == 32)
        {
            mDisplay.writeData(colorMap.data[0]);
            mDisplay.writeData(colorMap.data[0]);
            mDisplay.writeData(colorMap.data[0]);
            mDisplay.writeData(colorMap.data[0]);
        }
    }   
}

void Surface::paintTextLineC(const char*     text,
                             const int       width,
                             const int       line,
                             const ColorMap& colorMap)
{
    auto hWidth(width / 2);
    
    int prePad(0);
    int textLen(strlen(text) * 4);

    if (hWidth > textLen)
    {
        prePad = (hWidth - textLen) / 2;
    }

    for (int i(0); i < prePad; ++i)
    {
        mDisplay.writeData(colorMap.data[0]);
    }

    paintTextLine(text, text + strlen(text), line, colorMap);

    for (int i(0); i < (hWidth - (textLen + prePad)); ++i)
    {
        mDisplay.writeData(colorMap.data[0]);
    }
}

void Surface::scroll(uint8_t value)
{
    mDisplay.scroll(value);
}

void Surface::clear()
{
    mDisplay.clear();
    mDisplay.scroll(0);
}

}
